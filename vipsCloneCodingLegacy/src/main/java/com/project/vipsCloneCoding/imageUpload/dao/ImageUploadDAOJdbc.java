package com.project.vipsCloneCoding.imageUpload.dao;

import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.stereotype.Repository;
import com.project.vipsCloneCoding.imageUpload.domain.ImageUploadVO;


@Repository
public class ImageUploadDAOJdbc implements ImageUpoladDAO {

  private JdbcTemplate jdbcTemplate;

  private boolean tableExists(String tableName) {
    try {
      ResultSet resultSet = jdbcTemplate.getDataSource().getConnection().getMetaData()
          .getTables(null, null, tableName.toUpperCase(), null);
      return resultSet.next();
    } catch (Exception e) {
      return false;
    }
  }

  public void createImageTable() {
    if (!tableExists("image_table")) {
      String sql = "CREATE TABLE image_table (" + "id NUMBER GENERATED AS IDENTITY PRIMARY KEY, "
          + "image_name VARCHAR2(500), " + "image_path VARCHAR2(500), "
          + "description1 VARCHAR2(500), " + "description2 VARCHAR2(500), "
          + "description3 VARCHAR2(500), " + "description4 VARCHAR2(500), "
          + "description5 VARCHAR2(500), " + "description6 VARCHAR2(500)" + ")";
      jdbcTemplate.execute(sql);
    }
  }

  public void createImageGroupsTable() {
    if (!tableExists("image_groups")) {
      String sql = "CREATE TABLE image_groups ("
          + "group_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1) PRIMARY KEY, "
          + "group_title VARCHAR2(255) NOT NULL" + ")";
      jdbcTemplate.execute(sql);
    }
  }

  public void createImageGroupMappingTable() {
    if (!tableExists("image_group_mapping")) {
      String sql = "CREATE TABLE image_group_mapping (" + "group_id NUMBER NOT NULL, "
          + "image_id NUMBER NOT NULL, " + "order_index NUMBER NOT NULL, "
          + "CONSTRAINT pk_image_group_mapping PRIMARY KEY (group_id, image_id), "
          + "CONSTRAINT fk_group_id FOREIGN KEY (group_id) REFERENCES image_groups(group_id), "
          + "CONSTRAINT fk_image_id FOREIGN KEY (image_id) REFERENCES image_table(id)" + ")";
      jdbcTemplate.execute(sql);
    }
  }

  public void createAllTablesIfNotExist() {
    createImageTable();
    createImageGroupsTable();
    createImageGroupMappingTable();
  }

  @Autowired
  public ImageUploadDAOJdbc(DataSource dataSource) {
    this.jdbcTemplate = new JdbcTemplate(dataSource);
  }

  public void createImageUploadTable() throws Exception {
    jdbcTemplate
        .update("CREATE TABLE image_table (" + "id NUMBER GENERATED AS IDENTITY PRIMARY KEY, "
            + "image_name VARCHAR2(500), " + "image_path VARCHAR2(500), "
            + "description1 VARCHAR2(500), " + "description2 VARCHAR2(500), "
            + "description3 VARCHAR2(500), " + "description4 VARCHAR2(500), "
            + "description5 VARCHAR2(500), " + "description6 VARCHAR2(500)" + ")");
  }


  @Override
  public void saveImage(ImageUploadVO image) {
    String sql =
        "INSERT INTO image_table (image_name, image_path, description1, description2,description3,description4,description5,description6) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
    jdbcTemplate.update(sql, image.getImageName(), image.getImagePath(), image.getDescription1(),
        image.getDescription2(), image.getDescription3(), image.getDescription4(),
        image.getDescription5(), image.getDescription6());
  }


  @Override
  public ImageUploadVO getImageById(int id) {
    String sql = "SELECT * FROM image_table  WHERE id = ?";
    return jdbcTemplate.queryForObject(sql, new Object[] {id}, new RowMapper<ImageUploadVO>() {
      @Override
      public ImageUploadVO mapRow(ResultSet rs, int rowNum) throws SQLException {
        return new ImageUploadVO(rs.getInt("image_id"), rs.getString("image_name"),
            rs.getString("image_path"), rs.getString("description1"), rs.getString("description2"),
            rs.getString("description3"), rs.getString("description4"),
            rs.getString("description5"), rs.getString("description6"));
      }
    });
  }

  public void deleteImage(int id) {
    ImageUploadVO image = getImageById(id);
    if (image != null && image.getImagePath() != null) {
      File file = new File(image.getImagePath());
      if (file.exists() && file.delete()) {
        String sql = "DELETE FROM images WHERE id = ?";
        jdbcTemplate.update(sql, id);
      }
    }
  }

  @Override
  public void createImageGroup(String groupTitle) {
    String sql = "INSERT INTO image_groups (group_title) VALUES (?)";
    jdbcTemplate.update(sql, groupTitle);
  }

  @Override
  public void addImageToGroup(int groupId, int imageId, int orderIndex) {
    String sql =
        "INSERT INTO image_group_mapping (group_id, image_id, order_index) VALUES (?, ?, ?)";
    jdbcTemplate.update(sql, groupId, imageId, orderIndex);
  }

  @Override
  public void removeImageFromGroup(int groupId, int imageId) {
    String sql = "DELETE FROM image_group_mapping WHERE group_id = ? AND image_id = ?";
    jdbcTemplate.update(sql, groupId, imageId);
  }

  @Override
  public List<ImageUploadVO> listImagesByGroup(int groupId) {
    String sql =
        "SELECT it.* FROM image_table it INNER JOIN image_group_mapping igm ON it.id = igm.image_id WHERE igm.group_id = ? ORDER BY igm.order_index ASC";
    return jdbcTemplate.query(sql, new Object[] {groupId}, new RowMapper<ImageUploadVO>() {
      @Override
      public ImageUploadVO mapRow(ResultSet rs, int rowNum) throws SQLException {
        return new ImageUploadVO(rs.getInt("id"), rs.getString("image_name"),
            rs.getString("image_path"), rs.getString("description1"), rs.getString("description2"),
            rs.getString("description3"), rs.getString("description4"),
            rs.getString("description5"), rs.getString("description6"));
      }
    });
  }

}
